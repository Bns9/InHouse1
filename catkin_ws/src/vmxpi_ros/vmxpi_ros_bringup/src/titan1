#include "TitanDriver_ros_wrapper.h"
#include "navX_ros_wrapper.h"
#include "Cobra_ros.h"
#include "Sharp_ros.h"
#include "Servo_ros.h"
#include "Ultrasonic_ros.h"
#include "IOwd_ros.h"
#include "DI_ros.h"
#include "DO_ros.h"
#include <unistd.h>
#include "geometry_msgs/Twist.h"
#include <vector>

#include <dynamic_reconfigure/server.h>
#include <vmxpi_ros_bringup/MotorSpeedConfig.h>
#include <std_msgs/Float32.h>
#include <vmxpi_ros/Float.h>
#include <cmath>


static double motoer0encoder;
static double motor0_speed;
static double speed ;
double motor_controller_F, motor_controller_S, motor_controller_R;

void motor0_speed_callback(const std_msgs::Float32::ConstPtr& msg)
{
   motor0_speed = msg->data;
}

void  teleoperated_callback(const geometry_msgs::Twist::ConstPtr& msg)
{
   motor_controller_F=msg->linear.x;
   motor_controller_S=msg->linear.y;
   motor_controller_R=msg->angular.z;


}
void encoder0_dis_callback(const std_msgs::Float32::ConstPtr& msg)
{
   motoer0encoder = msg->data;
}


class TitanControl
{
   private:
  
   public:

      ros::ServiceClient set_m_speed,res_encoder_client;

      ros::Subscriber motor0_speed_sub; 
      ros::Subscriber encoder0_dis;
      ros::Subscriber titan_sub ;   
      ros::Subscriber teleoperated_sub ;   

      vmxpi_ros::MotorSpeed speed_msg;
     

   ;
      ros::Time current_time, last_time;





   
      TitanControl(ros::NodeHandle *nh){
         set_m_speed = nh->serviceClient<vmxpi_ros::MotorSpeed>("titan/set_motor_speed");  

        
      
         motor0_speed_sub = nh->subscribe("titan/motor0/speed", 1, motor0_speed_callback);
       
         teleoperated_sub = nh->subscribe("cmd_vel",10,teleoperated_callback);

        
         encoder0_dis = nh->subscribe("titan/encoder0/distance",1,encoder0_dis_callback);
         
       
        res_encoder_client = nh->serviceClient<std_srvs::Trigger>("titan/reset_encoder");
    }

   
      

void reset()
    {
        std_srvs::Trigger msg2; 
        res_encoder_client.call(msg2); // Resets displacement encoders
       
    }
   void motorcontorl()
   {
      ros::Rate loop_rate(30);
      reset();
      while (ros::ok())
      {

        speed_msg.request.speed = - motor_controller_F - motor_controller_R;
        speed_msg.request.motor =0;
        set_m_speed.call(speed_msg);
        ROS_INFO("Motor SPEED = %f",motoer0encoder);

        
         ros::spinOnce();
        loop_rate.sleep();
      }
   }

    

};


int main(int argc,char **argv)
{
    system("/usr/local/frc/bin/frcKillRobot.sh");
    ros::init(argc, argv,"titan_node");
       ros::NodeHandle nh; //internal reference to the ROS node that the program will use to interact with the ROS system
   VMXPi vmx(true, (uint8_t)50); //realtime bool and the update rate to use for the VMXPi AHRS/IMU interface, default is 50hz within a valid range of 4-200Hz
   ros::AsyncSpinner spinner(4);
   spinner.start();

   TitanDriverROSWrapper titan(&nh, &vmx);
   
   // navXROSWrapper navx(&nh, &vmx);
   TitanControl cfg(&nh);
   cfg.motorcontorl();

   
   
   ROS_INFO("ROS SHUTDOWN");
   ros::waitForShutdown();

}
